/**
 * - 변수 관련
 *   - 변수 이름
 *      1. 변수를 포함하는 범위 내에서 식별 가능한 이름으로 한다.
 *      2. boolean 값의 경우 is + ... 을 이름으로 한다.
 *      3. HTML element일 경우 앞에 $를 붙인다.
 *      4. 중복되는 내용을 포함하는 표현을 지양한다. (ex. totalPriceOfAll => totalPrice)
 *      5. 논리적 범위에서 큰 범주를 앞으로 하여 이름을 지어준다. (ex. titleOfModal => modalTitle)
 *      6. 형용사 등을 먼저 적어준다. (ex. priceTotal => totalPrice, productSelected => selectedProdct)
 *
 * - 함수 관련
 *   - 함수 이름
 *      1. 레이아웃 생성 함수의 경우 그 이름은 그 레이아웃의 이름으로 한다.
 *      2. 사용자 입력(이벤트 등)을 기점으로 동작하는 함수는 on+이벤트명+컴포넌트 를 이름으로 한다.
 *      3. 그 외 함수의 경우 동사+목적어 형태로 작성한다.
 *      4. 함수는 함수 이름이 가지고 있는 동작 외의 예상되지 않는 동작은 하지 않는다.
 *   - 함수 작성 관련
 *      1. 함수 내부에서 전역 return일 경우 return문 앞에는 한 줄 공백을 둔다.
 *      2. 선언문의 간결화를 위해 함수 인터페이스에 대해 RORO(Recive Object, Return Object) 패턴을 지향한다.
 *      3. layout 생성 함수: element를 return하는 함수 내부에서 return element는 $el로 하고, 이 layout의 이름을 함수 이름으로 한다.
 *
 * - 코드 작성 요령
 *    1. if문의 depth를 최대 1까지 허용한다. 이를 위해 얼리 리턴과 캡슐화를 적극적으로 활용한다.
 *    2. 주석은 // 뒤에 띄어쓰기를 한 번 한다.
 *    3. 모든 요소는 한 번 사용될 경우 그 주변에서 선언하고, 두 번 이상 재활용될 경우 shared로 따로 관리한다.(매직 넘버, 컴포넌트 등)
 *
 * - 파일 분리 기준
 *   - model: 각 태그들의 메타정보와 비즈니스 로직을 위한 데이터들의 모음
 *   - view: 렌더링을 위한 모든 메서드를 관리
 *   - controller: 유저 입력을 트리거로 발생하는 비즈니스 로직을 처리
 *   - utils: 간단한 처리 기능이나 코드 반복 작성을 줄이기 위한 코드 블럭 함수 등
 */

import { app } from './view';

function main() {
  app();
}

main();
