name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm -F assignment-6 tsc
      - run: pnpm -F assignment-6 build
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const pull_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;
            console.log(`Owner: ${owner}, Repo: ${repo}, PR number: ${pull_number}`);
            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: 'TypeScript 컴파일 또는 빌드 과정에서 오류가 발생했습니다. 로그를 확인해 주세요.',
              event: 'COMMENT'
            });

  lint:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm -F assignment-6 lint > lint_report.txt 2>&1
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const report = fs.readFileSync('lint_report.txt', 'utf8')
            const truncated_report = report.length > 65000 
              ? report.substr(0, 65000) + "\n\n... (report truncated due to length)"
              : report

            const pull_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: `Lint 실행 결과:\n\`\`\`\n${truncated_report}\n\`\`\``,
              event: 'COMMENT'
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
