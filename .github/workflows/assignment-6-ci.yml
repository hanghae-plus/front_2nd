name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize, reopened]

  push:
    branches: [develop]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 체크아웃
        uses: actions/checkout@v2

      - name: pnpm 설치
        run: npm install -g pnpm

      - name: 의존성 설치
        run: pnpm install
        working-directory: packages/assignment-6

      - name: job1 구현
        run: echo "job2의 내용을 구현해주세요"

      - name: tsc 빌드
        run: |
          set -o pipefail
          pnpm -F assignment-6 build 2>&1 | tee build.log
        working-directory: packages/assignment-6

      # 실패시 코멘트 작성
      - name: 빌드 오류 코멘트
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI  }}
          script: |
            const fs = require('fs');
            const pull_number = ${{ github.event.pull_request.number }};
            const buildLog = fs.readFileSync('packages/assignment-6/build.log', 'utf-8');

            const updated_title = `[BUILD FAIL] ${{ github.event.pull_request.title }}`;

            // PR에 리뷰 남기기
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              body: `빌드 오류 발생:\n\`\`\`\n${buildLog}\n\`\`\``,
              event: 'REQUEST_CHANGES'
            });
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: 체크아웃
        uses: actions/checkout@v2

      - name: pnpm 설치
        run: npm install -g pnpm

      - name: 의존성 설치
        run: pnpm install
        working-directory: packages/assignment-6

      - name: job2 구현
        run: echo "job2의 내용을 구현해주세요"

      - name: eslint 실행
        run: |
          set -o pipefail
          pnpm run lint 2>&1 | tee lint.log
        working-directory: packages/assignment-6

        # 실패시 코멘트 작성
      - name: lint 오류 코멘트
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI  }}
          script: |
            const fs = require('fs');
            const pull_number = ${{ github.event.pull_request.number }};
            const Log = fs.readFileSync('packages/assignment-6/lint.log', 'utf-8');

            const updated_title = `[ESLINT FAIL] ${{ github.event.pull_request.title }}`;

            // PR에 리뷰 남기기
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              body: `ESLINT :\n\`\`\`\n${Log}\n\`\`\``,
              event: 'REQUEST_CHANGES'
            });
  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

      - name: 체크아웃
        uses: actions/checkout@v2

      - name: pnpm 설치
        run: npm install -g pnpm

      - name: 의존성 설치
        run: pnpm install
        working-directory: packages/assignment-6

      - name: 테스트 실행 및 커버리지 리포트 생성
        id: test
        run: |
          pnpm test
          cat coverage/coverage-summary.txt
        working-directory: packages/assignment-6

      - name: 빌드 오류 및 커버리지 코멘트
        if: ${{ failure() || success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const pull_number = ${{ github.event.pull_request.number }};
            const coverageReport = fs.existsSync('packages/assignment-6/coverage/coverage-summary.txt') ? fs.readFileSync('packages/assignment-6/coverage/coverage-summary.txt', 'utf-8') : '커버리지 리포트 없음';

            const updated_title = `[테스트 성공] ${{ github.event.pull_request.title }}`;

            // PR에 리뷰 남기기
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number,
              body: `
                
                커버리지 결과:\n\`\`\`\n${coverageReport}\n\`\`\`
              `,
              event: 'REQUEST_CHANGES'
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
