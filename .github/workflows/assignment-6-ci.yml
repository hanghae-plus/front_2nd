name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job1: tsc, build 를 실행한다.'
        id: job1
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 build:tsc
      - name: 'job1-err: 오류가 발생하면 코멘트를 남긴다.'
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## tsc, build result
                
                빌드 과정에서 오류가 발생했습니다. 자세한 내용은 GitHub Actions 로그를 확인해주세요.`
            });

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job2: eslint를 실행'
        id: job2
        run:  |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 lint 2>&1 | tee lint_output.txt
          exit ${PIPESTATUS[0]}
      - name: 'job2-err: eslint에서 오류가 발생할 경우 report를 코멘트에 남긴다.'
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const lintOutput = fs.readFileSync('lint_output.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ESLint 실행 중 오류가 발생했습니다.
    
            ${lintOutput}`
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job3: 테스트를 실행'
        id: job3
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 test:coverage | tee test_output.txt
      - name: 'job3-res: 커버리지를 측정하여 코멘트에 남긴다.'
        if: success() && steps.job3.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const testOutput = fs.readFileSync('test_output.txt', 'utf8');
            
            // 'All files' 행을 찾아 커버리지 정보 추출
            const allFilesLine = testOutput.split('\n').find(line => line.startsWith('All files'));
            
            let coverageReport = '';
            
            if (allFilesLine) {
              const coverageValues = allFilesLine.split('|').map(item => item.trim());
              if (coverageValues.length >= 5) {
                coverageReport = `- 구문 커버리지: ${coverageValues[1]}%
            - 브랜치 커버리지: ${coverageValues[2]}%
            - 함수 커버리지: ${coverageValues[3]}%
            - 라인 커버리지: ${coverageValues[4]}%`;
              }
            }
              
            if (!coverageReport) {
              coverageReport = '커버리지 정보를 찾을 수 없습니다.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 테스트 성공 ✅
            ### 커버리지 결과:
    
            ${coverageReport.trim()}`
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job4: lighthouse ci 를 실행'
        id: job4
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 build
          npx @lhci/cli@0.11.x autorun
      - name: 'job4-res: 실행 결과를 코멘트에 남긴다.'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const lhciResultsPath = './lighthouse-results/manifest.json';
            const results = JSON.parse(fs.readFileSync(lhciResultsPath, 'utf8'));
            
            const scores = {
              performance: results[0].summary.performance * 100,
              accessibility: results[0].summary.accessibility * 100,
              'best-practices': results[0].summary['best-practices'] * 100,
              seo: results[0].summary.seo * 100
            };
            
            const comment = `## Lighthouse 성능 측정 결과
            
            | 카테고리 | 점수 |
            |----------|------|
            | Performance | ${scores.performance.toFixed(0)}% |
            | Accessibility | ${scores.accessibility.toFixed(0)}% |
            | Best Practices | ${scores['best-practices'].toFixed(0)}% |
            | SEO | ${scores.seo.toFixed(0)}% |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: 'job5: PR이 open될 때만 실행되고, 팀원 중 한 명을 랜덤으로 선정하여 리뷰어를 지정한 다음에 코멘트에 멘션하여 올린다. 실제로 PR에 리뷰어로 지정도 되어야한다.'
        id: job5
        run: |
          REVIEWERS=("AnSuebin" "LucetTin5" "horang-e")
          SELECTED_REVIEWER=${REVIEWERS[$RANDOM % ${#REVIEWERS[@]}]}
          
          # GitHub CLI를 사용하여 리뷰어 할당
          gh pr edit ${{ github.event.pull_request.number }} --add-reviewer $SELECTED_REVIEWER
          
          # 코멘트 작성
          gh pr comment ${{ github.event.pull_request.number }} --body "@$SELECTED_REVIEWER 님, 리뷰를 부탁드립니다."
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
