name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: tsc & build
        run: |
          pnpm --filter assignment-6 tsc > tsc-output.log 2>&1
          pnpm --filter assignment-6 build > build-output.log 2>&1

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const tscLog = fs.readFileSync('tsc-output.log', 'utf8');
            const buildLog = fs.readFileSync('build-output.log', 'utf8');
            const body = `
              **TypeScript Compile Logs**
              \`\`\`
              ${tscLog}
              \`\`\`

              **Build Logs**
              \`\`\`
              ${buildLog}
              \`\`\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm --filter assignment-6 lint > lint-output.log 2>&1

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const lintLog = fs.readFileSync('lint-output.log', 'utf8');
            const body = `
              **ESLint Logs**
              \`\`\`
              ${lintLog}
              \`\`\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run tests and generate coverage
        run: pnpm --filter assignment-6 test:coverage > test-output.log 2>&1

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const testLog = fs.readFileSync('test-output.log', 'utf8');
            const body = `
              **Test Coverage Logs**
              \`\`\`
              ${testLog}
              \`\`\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Report coverage
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          json-summary-path: packages/assignment-6/coverage/coverage-summary.json
          json-final-path: packages/assignment-6/coverage/coverage-final.json
          github-token: ${{ secrets.TOKEN_FOR_CI }}

      - name: Comment on PR
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const coverageSummary = JSON.parse(fs.readFileSync('packages/assignment-6/coverage/coverage-summary.json', 'utf8'));
            const body = `
              ### 테스트 성공 ✅

              **커버리지 결과**

              - 라인 커버리지: ${coverageSummary.total.lines.pct}%
              - 브랜치 커버리지: ${coverageSummary.total.branches.pct}%
              - 함수 커버리지: ${coverageSummary.total.functions.pct}%
              - 구문 커버리지: ${coverageSummary.total.statements.pct}%
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run Lighthouse CI
        run: |
          pnpm i -g @lhci/cli
          pnpm -F assignment-6 lhci || echo "Fail to Run Lighthouse CI!"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Format lighthouse score
        id: format_lighthouse
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const path = require('path');
            const resultsPath = path.join(process.env.GITHUB_WORKSPACE, 'packages', 'assignment-6', 'lhci_reports', 'manifest.json');
            if (!fs.existsSync(resultsPath)) {
              console.log(`File not found: ${resultsPath}`);
              return;
            }
            const results = JSON.parse(fs.readFileSync(resultsPath));
            const totalReports = results.length;
            // best-practices은 문자열로 저장 ( Lighthouse 지표 )
            const averageScores = {
              performance: 0,
              accessibility: 0,
              'best-practices': 0,
              seo: 0,
              pwa: 0
            };
            // Lighthouse 상세 지표
            const auditSummaries = {
              'first-contentful-paint': 0,
              'largest-contentful-paint': 0,
              'interactive': 0,
              'total-blocking-time': 0,
              'cumulative-layout-shift': 0
            };
            // 점수 평균
            results.forEach(result => {
              const { summary } = result;
              for (const key in averageScores) {
                averageScores[key] += summary[key];
              }
              const details = JSON.parse(fs.readFileSync(result.jsonPath));
              ['first-contentful-paint', 'largest-contentful-paint', 'interactive', 'total-blocking-time', 'cumulative-layout-shift'].forEach(auditName => {
                if (details.audits[auditName]) {
                  const auditDetails = details.audits[auditName];
                  auditSummaries[auditName] += parseFloat(auditDetails.displayValue) || 0;
                }
              });
            });
            const formatScore = res => (res >= 90 ? "🟢" : res >= 70 ? "🟠" : "🔴");
            // 상세 지표의 표준 점수에 따른 색상 표시
            const detailscore = (value, metric) => {
              switch (metric) {
              case 'first-contentful-paint':
                  return value <= 1.8 ? "🟢" : value <= 3 ? "🟠" : "🔴";
                case 'largest-contentful-paint':
                  return value <= 2.5 ? "🟢" : value <= 4 ? "🟠" : "🔴";
                case 'interactive':
                  return value <= 3.8 ? "🟢" : value <= 7.3 ? "🟠" : "🔴";
                case 'total-blocking-time':
                  return value <= 300 ? "🟢" : value <= 600 ? "🟠" : "🔴";
                case 'cumulative-layout-shift':
                  return value <= 0.1 ? "🟢" : value <= 0.25 ? "🟠" : "🔴";
                default:
                return "🔴"; // Default to red if metric is unknown
                }
            };
            let comments = "⚡️ Lighthouse Average Scores Across Reports:\n| Category | Score |\n| --- | --- |\n";
            Object.keys(averageScores).forEach(key => {
              const avgScore = Math.round((averageScores[key] / totalReports) * 100);
              comments += `| ${formatScore(avgScore)}  ${key.replace(/-/g, ' ')} | ${avgScore} |\n`;
            });
            comments += "\n⚡️ Average Details Across All Reports:\n| Category | Score |\n| --- | --- |\n";
            Object.keys(auditSummaries).forEach(auditName => {
              const average = auditSummaries[auditName] / totalReports;
              const formattedName = auditName.replace(/-/g, ' ');
              const colorCode = detailscore(average, auditName);
              const unit = (auditName === 'total-blocking-time' ? 'ms' : auditName === 'cumulative-layout-shift' ? '' : 's')
              comments += `| ${colorCode}  ${formattedName} | ${average.toFixed(1)}${unit} |\n`;
                        });
            // PR 전송
            if (comments && context.issue.number) {
              const issue_number = context.issue.number;
              const repo = context.repo.repo;
              const owner = context.repo.owner;
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: comments
              });
            } else {
              console.log("No PR COMMENT!");
            }

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Assign reviewer
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const reviewers = ['steve-shim', 'tsihnavy99', 'chhw130'];
            const randomReviewer = reviewers[Math.floor(Math.random() * reviewers.length)];
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: [context.payload.pull_request.user.login]
            });
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [randomReviewer]
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `@${randomReviewer}님, 리뷰를 부탁드립니다.`
            });
