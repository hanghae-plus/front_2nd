name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm -F assignment-6 tsc
      - run: pnpm -F assignment-6 build
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const pull_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: 'TypeScript 컴파일 또는 빌드 과정에서 오류가 발생했습니다. 로그를 확인해 주세요.',
              event: 'COMMENT'
            });

  lint:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm -F assignment-6 lint > lint_report.txt 2>&1
      - if: failure()
        id: format_eslint
        run: |
          ESLINT_RESULT=$(cat lint_report.txt)
          ERROR_COUNT=$(echo "$ESLINT_RESULT" | grep -oP '\d+(?= error)' || echo "0")
          WARNING_COUNT=$(echo "$ESLINT_RESULT" | grep -oP '\d+(?= warning)' || echo "0")

          echo "eslint_report<<EOF" >> $GITHUB_OUTPUT
          echo "## ESLint Results" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "$ESLINT_RESULT" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "✖ $((ERROR_COUNT + WARNING_COUNT)) problem(s) ($ERROR_COUNT error(s), $WARNING_COUNT warning(s))" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const report = `${{ steps.format_eslint.outputs.eslint_report }}`

            const pull_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: report,
              event: 'COMMENT'
            });

  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: |
          pnpm install
          pnpm --filter assignment-6 add -D @vitest/coverage-v8
      - run: pnpm -F assignment-6 test -- --coverage
      - id: coverage_report
        run: |
          if [ -f packages/assignment-6/coverage/coverage-summary.json ]; then
            COVERAGE=$(cat packages/assignment-6/coverage/coverage-summary.json)
            LINES=$(echo $COVERAGE | jq -r '.total.lines.pct')
            STATEMENTS=$(echo $COVERAGE | jq -r '.total.statements.pct')
            FUNCTIONS=$(echo $COVERAGE | jq -r '.total.functions.pct')
            BRANCHES=$(echo $COVERAGE | jq -r '.total.branches.pct')

            echo "coverage<<EOF" >> $GITHUB_OUTPUT
            echo "## 테스트 성공 ✅" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### 커버리지 결과" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "- 라인 커버리지: ${LINES}%" >> $GITHUB_OUTPUT
            echo "- 브랜치 커버리지: ${BRANCHES}%" >> $GITHUB_OUTPUT
            echo "- 함수 커버리지: ${FUNCTIONS}%" >> $GITHUB_OUTPUT
            echo "- 구문 커버리지: ${STATEMENTS}%" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "coverage<<EOF" >> $GITHUB_OUTPUT
            echo "## 테스트 실패 ❌" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "커버리지 파일을 찾을 수 없습니다. 테스트가 실패했거나 커버리지 리포트가 생성되지 않았습니다." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
      - uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const coverage = `${{ steps.coverage_report.outputs.coverage }}`
            const { owner, repo } = context.repo
            const pull_number = context.payload.pull_request.number;

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: coverage,
              event: 'COMMENT'
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
