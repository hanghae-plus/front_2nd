name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - "packages/assignment-6/**"

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run TypeScript compiler
        run: pnpm tsc
        working-directory: packages/assignment-6
        continue-on-error: true

      - name: Build project
        run: pnpm build
        working-directory: packages/assignment-6
        continue-on-error: true

      - name: Check for errors
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '빌드 과정에서 오류가 발생했습니다. 로그를 확인해 주세요.'
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint
        continue-on-error: true
        working-directory: packages/assignment-6

      - name: Check ESLint results
        id: eslint-check
        run: |
          if [ -s eslint_report.json ]; then
            echo "ESLINT_FAILED=true" >> $GITHUB_ENV
          fi
        working-directory: packages/assignment-6

      - name: Comment PR with ESLint report
        if: env.ESLINT_FAILED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const eslintReport = JSON.parse(fs.readFileSync('packages/assignment-6/eslint_report.json', 'utf8'));

            let commentBody = '## ESLint 검사 결과\n\n';
            commentBody += 'ESLint 검사 중 다음과 같은 문제가 발견되었습니다:\n\n';

            eslintReport.forEach(file => {
              if (file.messages.length > 0) {
                commentBody += `### ${file.filePath}\n\n`;
                file.messages.forEach(message => {
                  commentBody += `- **${message.ruleId}**: ${message.message} (${message.line}:${message.column})\n`;
                });
                commentBody += '\n';
              }
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install
          pnpm install -D vitest jsdom @vitest/coverage-v8
      - name: Run tests and generate coverage
        run: |
          cd packages/assignment-6
          pnpm run test
      - name: Generate coverage report
        id: coverage
        run: |
          LINE=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.lines.pct')
          BRANCH=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.branches.pct')
          FUNCTION=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.functions.pct')
          STATEMENT=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.statements.pct')
          echo "LINE=${LINE}" >> $GITHUB_OUTPUT
          echo "BRANCH=${BRANCH}" >> $GITHUB_OUTPUT
          echo "FUNCTION=${FUNCTION}" >> $GITHUB_OUTPUT
          echo "STATEMENT=${STATEMENT}" >> $GITHUB_OUTPUT
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 커버리지 결과
              * 라인 커버리지: ${{steps.coverage.outputs.line}}%
            * 브랜치 커버리지: ${{steps.coverage.outputs.branch}}%
            * 함수 커버리지: ${{steps.coverage.outputs.function}}%
            * 구문 커버리지: ${{steps.coverage.outputs.statement}}%`
            })

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          pnpm install
          pnpm build
        working-directory: packages/assignment-6

      - name: Run Lighthouse CI
        id: lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://your-deployed-url.com
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Format Lighthouse results
        id: format_results
        run: |
          echo "LIGHTHOUSE_RESULTS<<EOF" >> $GITHUB_OUTPUT
          echo "## Lighthouse 결과" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "| 카테고리 | 점수 |" >> $GITHUB_OUTPUT
          echo "|----------|------|" >> $GITHUB_OUTPUT
          echo "| Performance | $(jq '.[] | .summary.performance' ${{ steps.lighthouse.outputs.manifest }})" >> $GITHUB_OUTPUT
          echo "| Accessibility | $(jq '.[] | .summary.accessibility' ${{ steps.lighthouse.outputs.manifest }})" >> $GITHUB_OUTPUT
          echo "| Best Practices | $(jq '.[] | .summary["best-practices"]' ${{ steps.lighthouse.outputs.manifest }})" >> $GITHUB_OUTPUT
          echo "| SEO | $(jq '.[] | .summary.seo' ${{ steps.lighthouse.outputs.manifest }})" >> $GITHUB_OUTPUT
          echo "| Progressive Web App | $(jq '.[] | .summary.pwa' ${{ steps.lighthouse.outputs.manifest }})" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "자세한 결과: ${{ steps.lighthouse.outputs.links }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with Lighthouse results
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.format_results.outputs.LIGHTHOUSE_RESULTS }}`
            })

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Assign Reviewer
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const teamMembers = ['zhwltlr', 'shiny1912', 'haeji1124'];
            const selectedReviewer = teamMembers[Math.floor(Math.random() * teamMembers.length)];

            // PR에 리뷰어 할당
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [selectedReviewer]
            });

            // PR에 코멘트 작성
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${selectedReviewer}님이 이 PR의 리뷰어로 선정되었습니다. 리뷰 부탁드립니다!`
            });

            console.log(`Assigned ${selectedReviewer} as a reviewer and mentioned in a comment.`);
