name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - "packages/assignment-6/**"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: |
          pnpm -F assignment-6 build

      - name: Post build failure comment
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const message = `
            ## Build Failure :x:
            The build for this PR has failed. Please check the logs for more details.
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        id: eslint
        run: |
          pnpm -F assignment-6 lint 2>&1 | tee lint.log
          exit ${PIPESTATUS[0]}

      - name: Post ESLint failure comment
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const eslintReport = fs.readFileSync('lint.log', 'utf8');
            const message = `
            ## ESLint Results
            ${eslintReport}
            `;

            // PR에 코멘트를 남김
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: |
          pnpm -F assignment-6 test:with_coverage 2>&1 | tee test.log
          exit ${PIPESTATUS[0]}

      - name: Post test results comment
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage-summary.json', 'utf-8')).total;
            const message = `
            ## 테스트 성공 ✅
            ### 커버리지 결과
            - 라인 커버리지: ${coverage.lines.pct}%
            - 브랜치 커버리지: ${coverage.branches.pct}%
            - 함수 커버리지: ${coverage.functions.pct}%
            - 구문 커버리지: ${coverage.statements.pct}%
            `;

            // PR에 코멘트를 남김
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            });

      - name: Post test results comment
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage-summary.json', 'utf-8')).total;
            const message = `
            ## 테스트 실패 :x:
            ### 커버리지 결과
            - 라인 커버리지: ${coverage.lines.pct}%
            - 브랜치 커버리지: ${coverage.branches.pct}%
            - 함수 커버리지: ${coverage.functions.pct}%
            - 구문 커버리지: ${coverage.statements.pct}%
            `;

            // PR에 코멘트를 남김
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install Lighthouse CI
        run: pnpm add -D @lhci/cli

      - name: Run Lighthouse CI
        run: pnpm -F assignment-6 lhci

      - name: Post Lighthouse CI results comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('./lhci-results/lhr-0.report.json', 'utf-8'));
            const performance = report.categories.performance.score * 100;
            const accessibility = report.categories.accessibility.score * 100;
            const bestPractices = report.categories['best-practices'].score * 100;
            const seo = report.categories.seo.score * 100;

            const message = `
            ## Lighthouse 성능 측정 결과
            | 카테고리      | 점수 |
            | ------------- | ---- |
            | Performance   | ${performance}% |
            | Accessibility | ${accessibility}% |
            | Best Practices| ${bestPractices}% |
            | SEO           | ${seo}% |
            `;

            // PR에 코멘트를 남김
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
