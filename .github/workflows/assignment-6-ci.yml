name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/assignment-6/**'

permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run TypeScript compiler
        run: pnpm tsc
        working-directory: packages/assignment-6
        continue-on-error: true

      - name: Build project
        run: pnpm build
        working-directory: packages/assignment-6
        continue-on-error: true

      - name: Check for errors
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '빌드 과정에서 오류가 발생했습니다. 로그를 확인해 주세요.'
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint
        continue-on-error: true
        working-directory: packages/assignment-6

      - name: Check ESLint results
        id: eslint-check
        run: |
          if [ -s eslint_report.json ]; then
            echo "ESLINT_FAILED=true" >> $GITHUB_ENV
          fi
        working-directory: packages/assignment-6

      - name: Comment PR with ESLint report
        if: env.ESLINT_FAILED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const eslintReport = JSON.parse(fs.readFileSync('packages/assignment-6/eslint_report.json', 'utf8'));

            let commentBody = '## ESLint 검사 결과\n\n';
            commentBody += 'ESLint 검사 중 다음과 같은 문제가 발견되었습니다:\n\n';

            eslintReport.forEach(file => {
              if (file.messages.length > 0) {
                commentBody += `### ${file.filePath}\n\n`;
                file.messages.forEach(message => {
                  commentBody += `- **${message.ruleId}**: ${message.message} (${message.line}:${message.column})\n`;
                });
                commentBody += '\n';
              }
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install
          pnpm install -D vitest jsdom @vitest/coverage-v8
      - name: Run tests and generate coverage
        run: |
          cd packages/assignment-6
          pnpm run test
      - name: Generate coverage report
        id: coverage
        run: |
          LINE=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.lines.pct')
          BRANCH=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.branches.pct')
          FUNCTION=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.functions.pct')
          STATEMENT=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.statements.pct')
          echo "LINE=${LINE}" >> $GITHUB_OUTPUT
          echo "BRANCH=${BRANCH}" >> $GITHUB_OUTPUT
          echo "FUNCTION=${FUNCTION}" >> $GITHUB_OUTPUT
          echo "STATEMENT=${STATEMENT}" >> $GITHUB_OUTPUT

      - name: Comment PR with test results
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const coverage = {
              line: process.env.LINE,
              branch: process.env.BRANCH,
              function: process.env.FUNCTION,
              statement: process.env.STATEMENT
            };

            const commentBody = `## 테스트 결과



            - 라인 커버리지: ${coverage.line}%
            - 브랜치 커버리지: ${coverage.branch}%
            - 함수 커버리지: ${coverage.function}%
            - 구문 커버리지: ${coverage.statement}%`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job4: lighthouse ci 를 실행'
        id: job4
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 lhci
      - name: 'job4-res: 실행 결과를 코멘트에 남긴다.'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const lighthouseReport = JSON.parse(fs.readFileSync('packages/assignment-6/lhci_reports/manifest.json', 'utf8'));
            const formatResult = (res) => Math.round(res * 100);
            
            // 첫 번째 결과만 사용
            const result = lighthouseReport[0];
            const { summary } = result;
            const finalSummary = Object.fromEntries(
            Object.entries(summary).map(([key, value]) => [key, formatResult(value)])
            );
            
            const comment = [
              "| 카테고리 | 점수 |",
              "| --- | --- |",
              `| Performance | ${finalSummary.performance}% |`,
              `| Accessibility | ${finalSummary.accessibility}% |`,
              `| Best practices | ${finalSummary['best-practices']}% |`,
              `| SEO | ${finalSummary.seo}% |`,
              "\n",
            ].join("\n");
            
            const lighthouseComment = `## Lighthouse 성능 측정 결과
            
            ${comment}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: lighthouseComment
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Assign Reviewer
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const reviewers = ['zhwltlr', 'shiny1912', 'haeji1124'];
            const randomReviewer = reviewers[Math.floor(Math.random() * reviewers.length)];

            github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [randomReviewer]
            });
