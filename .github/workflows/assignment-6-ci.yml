name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: tsc & build
        run: |
          pnpm --filter assignment-6 tsc > tsc-output.log 2>&1
          pnpm --filter assignment-6 build > build-output.log 2>&1

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const tscLog = fs.readFileSync('tsc-output.log', 'utf8');
            const buildLog = fs.readFileSync('build-output.log', 'utf8');
            const body = `
              **TypeScript Compile Logs**
              \`\`\`
              ${tscLog}
              \`\`\`

              **Build Logs**
              \`\`\`
              ${buildLog}
              \`\`\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm --filter assignment-6 lint > lint-output.log 2>&1

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const lintLog = fs.readFileSync('lint-output.log', 'utf8');
            const body = `
              **ESLint Logs**
              \`\`\`
              ${lintLog}
              \`\`\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Create test coverage
        run: pnpm --filter assignment-6 test:coverage > test-output.log 2>&1

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const testLog = fs.readFileSync('test-output.log', 'utf8');
            const body = `
              **Test Coverage Logs**
              \`\`\`
              ${testLog}
              \`\`\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Report coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          json-summary-path: packages/assignment-6/coverage/coverage-summary.json
          json-final-path: packages/assignment-6/coverage/coverage-final.json
          github-token: ${{ secrets.TOKEN_FOR_CI }}

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install
      
      - name: Build
        run: pnpm --filter assignment-6 build

      - name: Run Lighthouse ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          pnpm install -g @lhci/cli
          pnpm --filter assignment-6 lighthouse > lighthouse-output.log 2>&1 || echo "Fail to Run Lighthouse CI"

      - name: Comment Lighthouse results
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('lighthouse-output.log', 'utf8');
            const body = `
              **Lighthouse CI Results**
              \`\`\`
              ${results}
              \`\`\`
            `;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Assign reviewer
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const reviewers = ['steve-shim', 'tsihnavy99', 'chhw130'];
            const randomReviewer = reviewers[Math.floor(Math.random() * reviewers.length)];
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: [context.payload.pull_request.user.login]
            });
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [randomReviewer]
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `@${randomReviewer}님, 리뷰를 부탁드립니다.`
            });