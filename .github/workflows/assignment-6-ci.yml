name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: [job1] tsc, build 를 실행한다. 오류가 발생하면 코멘트를 남긴다.
        id: job1
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 build
        continue-on-error: true
      - name: Comment PR on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const jobOutput = `${process.env.GITHUB_WORKFLOW} 워크플로우의 job1 단계에서 오류가 발생했습니다:
            
            \`\`\`
            ${{ steps.job1.outputs.stderr }}
            \`\`\`
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: jobOutput
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: [job2] eslint를 실행한 다음에, eslint에서 오류가 발생할 경우 report를 코멘트에 남긴다.
        id: job2
        run:  |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 lint
        continue-on-error: true
      - name: Comment PR on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const jobOutput = `${process.env.GITHUB_WORKFLOW} 워크플로우의 job2 단계에서 오류가 발생했습니다:
            
            \`\`\`
            ${{ steps.job2.outputs.stderr }}
            \`\`\`
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: jobOutput
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: [job3] 테스트를 실행하고, 커버리지를 측정하여 코멘트에 남긴다.
        id: job3
        run: |
          output=$(pnpm -F assignment-6 test:coverage | tee /dev/stderr)
          echo "coverage<<EOF" >> $GITHUB_OUTPUT
          echo "$output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with Coverage
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const coverage = `${{ steps.job3.outputs.coverage }}`;
            
            // 정규 표현식을 사용하여 커버리지 정보 추출
            const lines = coverage.match(/Lines\s*:\s*([\d.]+)%/)?.[1] || 'N/A';
            const functions = coverage.match(/Functions\s*:\s*([\d.]+)%/)?.[1] || 'N/A';
            const statements = coverage.match(/Statements\s*:\s*([\d.]+)%/)?.[1] || 'N/A';
            const branches = coverage.match(/Branches\s*:\s*([\d.]+)%/)?.[1] || 'N/A';
            
            const coverageComment = `테스트 성공 ✅
            
            커버리지 결과
            
            • 라인 커버리지: ${lines}%
            • 브랜치 커버리지: ${branches}%
            • 함수 커버리지: ${functions}%
            • 구문 커버리지: ${statements}%`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            })`

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: [job4] lighthouse ci 를 실행하고, 실행 결과를 코멘트에 남긴다.
        id: job4
        run: |
          pnpm -F assignment-6 install
          pnpm --filter assignment-6 build
          pnpm add -g @lhci/cli@0.11.x
          LHCI_OUTPUT=$(lhci autorun --collect.url=http://localhost --collect.staticDistDir=./packages/assignment-6/dist)
          echo "$LHCI_OUTPUT"
          
          # Lighthouse 결과 파싱
          PERFORMANCE=$(echo "$LHCI_OUTPUT" | grep -oP 'performance: \K[0-9]+')
          ACCESSIBILITY=$(echo "$LHCI_OUTPUT" | grep -oP 'accessibility: \K[0-9]+')
          BEST_PRACTICES=$(echo "$LHCI_OUTPUT" | grep -oP 'best-practices: \K[0-9]+')
          SEO=$(echo "$LHCI_OUTPUT" | grep -oP 'seo: \K[0-9]+')
          
          # 결과를 GitHub Actions 출력으로 설정
          echo "performance=$PERFORMANCE" >> $GITHUB_OUTPUT
          echo "accessibility=$ACCESSIBILITY" >> $GITHUB_OUTPUT
          echo "best_practices=$BEST_PRACTICES" >> $GITHUB_OUTPUT
          echo "seo=$SEO" >> $GITHUB_OUTPUT

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const performance = '${{ steps.job4.outputs.performance }}';
            const accessibility = '${{ steps.job4.outputs.accessibility }}';
            const bestPractices = '${{ steps.job4.outputs.best_practices }}';
            const seo = '${{ steps.job4.outputs.seo }}';
            
            const comment = `
            ## Lighthouse 성능 측정 결과

            | 카테고리 | 점수 |
            |----------|------|
            | Performance | ${performance}% |
            | Accessibility | ${accessibility}% |
            | Best Practices | ${bestPractices}% |
            | SEO | ${seo}% |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
