name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install
      - name: Run tsc and build
        id: build
        run: |
          pnpm -F assignment-6 run tsc
          pnpm -F assignment-6 run build
      - name: Comment on PR if build fails
        if: failure() && steps.build.outcome =='failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '빌드 과정에서 오류가 발생했습니다. 로그를 확인해주세요.'
            })
      - name: Comment on PR if build succeeds
        if: success() && steps.build.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '성공적으로 빌드되었습니다!👍'
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install
      - name: Run eslint
        id: eslint
        run: |
          cd packages/assignment-6
          pnpm run lint
      - name: Comment eslint report on PR
        if: failure() && steps.eslint.outcome=='failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ESLint에서 오류가 발생했습니다. 리포트:\n```json\n' + eslintReport + '\n```'
            })
      - name: Comment there's not any eslint report
        if: success() && steps.eslint.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const eslintReport = fs.readFileSync('packages/assignment-6/.eslintrc.cjs', 'utf8')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ESLint에서 오류가 발생하지 않았습니다! 성공이에요!👍'
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install
          pnpm install -D vitest jsdom @vitest/coverage-v8
      - name: Run tests and generate coverage
        run: |
          cd packages/assignment-6
          pnpm run test
      - name: Generate coverage report
        id: coverage
        run: |
          LINE=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.lines.pct')
          BRANCH=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.branches.pct')
          FUNCTION=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.functions.pct')
          STATEMENT=$(cat packages/assignment-6/coverage/coverage-summary.json | jq -r '.total.statements.pct')
          echo "LINE=${LINE}" >> $GITHUB_OUTPUT
          echo "BRANCH=${BRANCH}" >> $GITHUB_OUTPUT
          echo "FUNCTION=${FUNCTION}" >> $GITHUB_OUTPUT
          echo "STATEMENT=${STATEMENT}" >> $GITHUB_OUTPUT

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 커버리지 결과
              * 라인 커버리지: ${{steps.coverage.outputs.line}}%
            * 브랜치 커버리지: ${{steps.coverage.outputs.branch}}%
            * 함수 커버리지: ${{steps.coverage.outputs.function}}%
            * 구문 커버리지: ${{steps.coverage.outputs.statement}}%`
            })

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          pnpm -F assignment-6 install
          pnpm install -g @lhci/cli@0.11.x
      - name: start server
        run: pnpm -F assignment-6 start
      - name: Run Lighthouse CI
        run: pnpm -F assignment-6 run lighthouse
      - name: Comment Lighthouse results on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const path = require('path');

            console.log('Current working directory:', process.cwd());
            console.log('Contents of current directory:', fs.readdirSync('.'));

            const lighthouseDir = path.join('/packages', 'assignment-6', 'lighthouse-results');
            console.log('Lighthouse directory path:', lighthouseDir);

            if (!fs.existsSync(lighthouseDir)) {
              console.log('Lighthouse results directory does not exist');
              return;
            }

            console.log('Contents of lighthouse-results directory:', fs.readdirSync(lighthouseDir));

            const jsonFiles = fs.readdirSync(lighthouseDir).filter(file => file.endsWith('.json'));
            if (jsonFiles.length === 0) {
              console.log('No JSON files found in lighthouse-results directory');
              return;
            }

            const latestFile = jsonFiles.sort((a, b) => {
              return fs.statSync(path.join(lighthouseDir, b)).mtime.getTime() - 
                    fs.statSync(path.join(lighthouseDir, a)).mtime.getTime();
            })[0];

            const lighthouseReportPath = path.join(lighthouseDir, latestFile);
            console.log('Lighthouse report path:', lighthouseReportPath);

            if (!fs.existsSync(lighthouseReportPath)) {
              console.log('Lighthouse report file does not exist');
              return;
            }

            const lighthouseReport = fs.readFileSync(lighthouseReportPath, 'utf8');
            const report = JSON.parse(lighthouseReport);

            // 주요 메트릭을 추출합니다
            const metrics = [
              'first-contentful-paint',
              'largest-contentful-paint',
              'total-blocking-time',
              'cumulative-layout-shift',
            ];

            let comment = '## Lighthouse CI 결과\n\n';
            metrics.forEach(metric => {
              const score = report.audits[metric].score * 100;
              comment += `- ${report.audits[metric].title}: ${score.toFixed(0)}점\n`;
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })

  # assign_reviewer:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Assign random reviewer
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{secrets.TOKEN_FOR_CI}}
  #         script: |
  #           const teamMembers = ['AnSuebin', 'Raihyul', 'lucettin5']
  #           const randomReviewer = teamMembers[Math.floor(Math.random() * teamMembers.length)]

  #           await github.rest.pulls.requestReviewers({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             pull_number: context.issue.number,
  #             reviewers: [randomReviewer]
  #           })

  #           await github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: `@${randomReviewer} 님이 리뷰어로 지정되었습니다. 리뷰 부탁드립니다!`
  #           })
