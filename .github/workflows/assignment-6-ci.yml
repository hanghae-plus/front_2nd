name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm -F assignment-6 build
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: '## 빌드 오류 발생 ❌\nTypeScript 컴파일 또는 빌드 과정에서 오류가 발생했습니다. 로그를 확인해 주세요.',
              event: 'COMMENT'
            });

  lint:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm -F assignment-6 lint > lint_report.txt 2>&1
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const report = fs.readFileSync('lint_report.txt', 'utf8')
            const truncated_report = report.length > 65000 
              ? report.substr(0, 65000) + "\n\n... (report truncated due to length)"
              : report

            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `## ESLint Results\n\`\`\`\n${truncated_report}\n\`\`\``,
              event: 'COMMENT'
            });

  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - run: |
          pnpm install
          pnpm -F assignment-6 add -D @vitest/coverage-v8
      - run: pnpm -F assignment-6 coverage
      - id: format_coverage
        run: |
          COVERAGE_FILE="packages/assignment-6/coverage/coverage-summary.json"
          echo "Using coverage file: $COVERAGE_FILE"

          LINE_COVERAGE=$(jq '.total.lines.pct' $COVERAGE_FILE)
          echo "line_coverage: $LINE_COVERAGE"
          BRANCH_COVERAGE=$(jq '.total.branches.pct' $COVERAGE_FILE)
          echo "branch_coverage: $BRANCH_COVERAGE"
          FUNCTION_COVERAGE=$(jq '.total.functions.pct' $COVERAGE_FILE)
          echo "function_coverage: $FUNCTION_COVERAGE"
          STATEMENT_COVERAGE=$(jq '.total.statements.pct' $COVERAGE_FILE)
          echo "statement_coverage: $STATEMENT_COVERAGE"

          echo "line_coverage=${LINE_COVERAGE}" >> $GITHUB_OUTPUT
          echo "branch_coverage=${BRANCH_COVERAGE}" >> $GITHUB_OUTPUT
          echo "function_coverage=${FUNCTION_COVERAGE}" >> $GITHUB_OUTPUT
          echo "statement_coverage=${STATEMENT_COVERAGE}" >> $GITHUB_OUTPUT
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const { owner, repo } = context.repo
            const pull_number = context.payload.pull_request.number;

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: '## 테스트 실패 ❌',
              event: 'COMMENT'
            });
      - if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const line_coverage = `${{ steps.format_coverage.outputs.line_coverage }}%`
            const function_coverage = `${{ steps.format_coverage.outputs.function_coverage }}%`
            const statement_coverage = `${{ steps.format_coverage.outputs.statement_coverage }}%`
            const branch_coverage = `${{ steps.format_coverage.outputs.branch_coverage }}%`

            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `## 테스트 성공 ✅\n ### 커버리지 결과\n 라인 커버리지: ${line_coverage}\n 함수 커버리지: ${function_coverage}\n 구문 커버리지: ${statement_coverage}\n 브랜치 커버리지: ${branch_coverage}`,
              event: 'COMMENT'
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - run: |
          pnpm install
          pnpm -F assignment-6 add -D @lhci/cli@0.7.x
      - run: |
          pnpm -F assignment-6 build
          pnpm --F assignment-6 lighthouse
      - id: extract_lighthouse_scores
        run: |
          LIGHTHOUSE_RESULTS="packages/assignment-6/.lighthouseci"
          PERFORMANCE=$(jq '.categories.performance.score' $LIGHTHOUSE_RESULTS/lhr-*.json)
          ACCESSIBILITY=$(jq '.categories.accessibility.score' $LIGHTHOUSE_RESULTS/lhr-*.json)
          BEST_PRACTICES=$(jq '.categories["best-practices"].score' $LIGHTHOUSE_RESULTS/lhr-*.json)
          SEO=$(jq '.categories.seo.score' $LIGHTHOUSE_RESULTS/lhr-*.json)
          PWA=$(jq '.categories.pwa.score' $LIGHTHOUSE_RESULTS/lhr-*.json || echo "null")
          echo "performance_score=$(echo $PERFORMANCE | jq -r '. * 100')" >> $GITHUB_OUTPUT
          echo "accessibility_score=$(echo $ACCESSIBILITY | jq -r '. * 100')" >> $GITHUB_OUTPUT
          echo "best_practices_score=$(echo $BEST_PRACTICES | jq -r '. * 100')" >> $GITHUB_OUTPUT
          echo "seo_score=$(echo $SEO | jq -r '. * 100')" >> $GITHUB_OUTPUT
          echo "pwa_score=$(echo $PWA | jq -r '. * 100')" >> $GITHUB_OUTPUT
      - if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const performance = `${{ steps.extract_lighthouse_scores.outputs.performance_score }}`
            const accessibility = `${{ steps.extract_lighthouse_scores.outputs.accessibility_score }}`
            const bestPractices = `${{ steps.extract_lighthouse_scores.outputs.best_practices_score }}`
            const seo = `${{ steps.extract_lighthouse_scores.outputs.seo_score }}`
            const pwa = `${{ steps.extract_lighthouse_scores.outputs.pwa_score }}`

            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `## Lighthouse 성능 측정 결과 ✅\n\n| 카테고리 | 점수 |\n| --- | --- |\n| Performance | ${performance}% |\n| Accessibility | ${accessibility}% |\n| Best Practices | ${bestPractices}% |\n| SEO | ${seo}% |\n| PWA | ${pwa !== "null" ? pwa : "N/A"}% |`,
              event: 'COMMENT'
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - id: choose_reviewer
        run: |
          TEAM_MEMBERS=("metacode22" "lhk228")

          RANDOM_REVIEWER=${TEAM_MEMBERS[$RANDOM % ${#TEAM_MEMBERS[@]}]}

          echo "Selected reviewer: $RANDOM_REVIEWER"

          echo "reviewer=$RANDOM_REVIEWER" >> $GITHUB_OUTPUT
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const reviewer = '${{ steps.choose_reviewer.outputs.reviewer }}';

            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;

            await github.rest.pulls.requestReviewers({
              owner,
              repo,
              pull_number,
              reviewers: [reviewer]
            });
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const reviewer = '${{ steps.choose_reviewer.outputs.reviewer }}';

            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `@${reviewer} Please review this PR.`
            });
