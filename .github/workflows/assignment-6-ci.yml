name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'packages/assignment-6/**'

env:
  GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: job1 구현
        run: echo "job1의 내용을 구현해주세요"

      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # v20.13.1

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: run build
        run: pnpm -F assignment-6 build

      - name: Comment on PR if errors occurred
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ❌ Build Failed \n TSC or Build process failed. Please check the errors and fix them.'
            })


  lint:
    runs-on: ubuntu-latest
    steps:
      - name: job2 구현
        run: echo "job2의 내용을 구현해주세요"

      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm -F assignment-6 lint > eslint_report.txt 2>&1 || echo "LINT_FAILED=true" >> $GITHUB_ENV

      - name: Comment ESLint results (Warning and Error)
        if: env.LINT_FAILED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const eslintReport = fs.readFileSync('eslint_report.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ESLint Results \n ${eslintReport.trim()}`
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm -F assignment-6 test:coverage

      - name: test pwd
        run: pwd

      - name: Comment test results
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const coverageJson = JSON.parse(fs.readFileSync(`packages/assignment-6/coverage/coverage-summary.json`, 'utf8'));
            
            const {lines, branches, functions, statements} = coverageJson.total;
            
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 테스트 성공✅ 
              \n ### 커버리지 결과 \n
              
              • 라인 커버리지: ${lines.pct}%
              • 브랜치 커버리지: ${branches.pct}%
              • 함수 커버리지: ${functions.pct}%
              • 구문 커버리지: ${statements.pct}%
            `})

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm -F assignment-6 lhci

      - name: Format and comment Lighthouse results
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const lighthouseReport = JSON.parse(fs.readFileSync('./lhci_reports/manifest.json', 'utf8'));
            
            const formatScore = (score) => Math.round(score * 100) + '%';
            
            const results = {
              'Performance': formatScore(lighthouseReport.categories.performance.score),
              'Accessibility': formatScore(lighthouseReport.categories.accessibility.score),
              'Best Practices': formatScore(lighthouseReport.categories['best-practices'].score),
              'SEO': formatScore(lighthouseReport.categories.seo.score)
            };
            
            let tableContent = '| 카테고리 | 점수 |\n|----------|------|\n';
            for (const [category, score] of Object.entries(results)) {
              tableContent += `| ${category} | ${score} |\n`;
            }
            
            const comment = `## Lighthouse 성능 측정 결과 \n ${tableContent}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });


#  assign_reviewer:
#    runs-on: ubuntu-latest
#    steps:
#      - name: assign random reviewer
#        uses: actions/github-script@v6
#        with:
#          github-token: ${{ env.GITHUB_TOKEN }}
#          script: |
#            const teams = ["bbbjihan", "soojjung"];
#            const randomReviewer = teams[Math.floor(Math.random() * teams.length)];
#
#            await github.rest.pulls.requestReviewers({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              pull_number: context.issue.number,
#              reviewers: [randomReviewer]
#            });
#
#            await github.rest.issues.createComment({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              issue_number: context.issue.number,
#              body: `## 🎉랜덤 리뷰 \n 랜덤 리뷰로 선정되신 @${randomReviewer}님!🎉 리뷰를 부탁드립니다.`
#            });