name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened

    paths:
      - 'packages/assignment-6/**'

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: TypeScript Compile
        run: pnpm -F assignment-6 tsc 2>tsc-error.log
        id: tsc

      - name: Build Project
        run: pnpm -F assignment-6 build > error.log 2>&1
        id: build

      - name: Check for errors
        if: steps.tsc.outcome == 'failure' || steps.build.outcome == 'failure'
        run: |
          echo "TypeScript Compile Error or Build Error"
          echo "## TypeScript Compile Logs"
          cat tsc-error.log || true
          echo "## Build Logs"
          cat build-error.log || true
          exit 1

      - name: Post comment on failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const errors = [];
            if ('${{ steps.tsc.outcome }}' === 'failure') errors.push('TypeScript Compile');
            if ('${{ steps.build.outcome }}' === 'failure') errors.push('Build');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ The following errors occurred:\n${errors.join('\n')}\n\nPlease check the build logs for more details.`
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm -F assignment-6 lint > lint_output.log 2>&1

      - name: Post ESLint report as comment
        if: failure()
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs')
            const report = fs.readFileSync('packages/assignment-6/.eslintrc.cjs', 'utf8')
            const message = `## ESLint Results\n\n${report}`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message            
            })

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Create test coverage
        run: pnpm --filter assignment-6 test:coverage

      - name: Report coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          json-summary-path: packages/assignment-6/coverage/coverage-summary.json
          json-final-path: packages/assignment-6/coverage/coverage-final.json
          github-token: ${{ secrets.TOKEN_FOR_CI }}
              
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm --filter assignment-6 build

      - name: Run Lighthouse ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          pnpm install -g @lhci/cli
          pnpm --filter assignment-6 lighthouse || echo "Fail to Run Lighthouse CI"
      - name: Comment Lighthouse comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_FOR_CI }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('packages/assignment-6/lhci_reports/manifest.json', 'utf8'));
            let comment = "# Lighthouse 성능 측정 결과\n| 카테고리 | 점수 |\n| :---: | :---: |";
            results.forEach((result) => {
              const { summary } = result;
              Object.entries(summary).forEach(([key, value]) => {
                const capitalizedKey = key.charAt(0).toUpperCase() + key.slice(1);
                const score = (value * 100);
                comment += `\n| ${capitalizedKey} | ${score}% |`;
              });
            })
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'

    steps:
      - uses: actions/checkout@v4

      - name: Add collaborators
        env:
          GH_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
        run: |
          gh api repos/${{ github.repository }}/collaborators/tsihnavy99 -X PUT -f permission=push
          gh api repos/${{ github.repository }}/collaborators/steve-shim -X PUT -f permission=push
      - name: Pick a teammate randomly & select him as reviewer & request review
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const myTeammates = [
            {name:'형예은', github: 'tsihnavy99'},
            {name:'심승혁', github: 'steve-shim'}
            ];
            const randomIndex = Math.round(Math.random());
            const reviewerName = myTeammates[randomIndex].name;
            const reviewerGithub = myTeammates[randomIndex].github;
            const comment = `
            @${reviewerGithub} ${reviewerName}님, 리뷰를 부탁드립니다.
            `;
            await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
            })
            await github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: [reviewerGithub]
            })