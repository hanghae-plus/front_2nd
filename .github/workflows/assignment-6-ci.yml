name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'packages/assignment-6/**'

env:
  GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: run build
        run: pnpm -F assignment-6 build

      - name: Comment on PR if errors occurred
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ❌ Build Failed \n TSC or Build process failed. Please check the errors and fix them.'
            })


  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm -F assignment-6 lint > eslint_report.txt 2>&1 || echo "LINT_FAILED=true" >> $GITHUB_ENV

      - name: Comment ESLint results (Warning and Error)
        if: env.LINT_FAILED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const eslintReport = fs.readFileSync('eslint_report.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ESLint Results \n ${eslintReport.trim()}`
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm -F assignment-6 test:coverage

      - name: test pwd
        run: pwd

      - name: Comment test results
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const coverageJson = JSON.parse(fs.readFileSync(`packages/assignment-6/coverage/coverage-summary.json`, 'utf8'));
            
            const {lines, branches, functions, statements} = coverageJson.total;
            
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 테스트 성공✅ 
              \n ### 커버리지 결과 \n
            
              • 라인 커버리지: ${lines.pct}%
              • 브랜치 커버리지: ${branches.pct}%
              • 함수 커버리지: ${functions.pct}%
              • 구문 커버리지: ${statements.pct}%
            `})

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Read .nvmrc
        id: node_version
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.5.0

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ env.GITHUB_TOKEN }}
        run: |
          pnpm -F assignment-6 lhci

      - name: Format and comment Lighthouse results
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const lighthouseReport = JSON.parse(fs.readFileSync('packages/assignment-6/lhci_reports/manifest.json', 'utf8'));
            
            const formatResult = (res) => Math.round(res * 100);
            
            let comments = "";
            
            lighthouseReport.forEach((result,index) => {
                const { summary } = result;
              
                const finalSummary = Object.fromEntries(
                Object.entries(summary).map(([key, value]) => [key, formatResult(value)])
                );
  
                const score = (res) => (res >= 90 ? "🟢" : res >= 70 ? "🟠" : "🔴");
  
                const comment = [
                  `⚡️ Lighthouse report ${index}`,
                  `| Category | Score |`,
                  `| --- | --- |`,
                  `| ${score(finalSummary.performance)} Performance | ${finalSummary.performance} |`,
                  `| ${score(finalSummary.accessibility)} Accessibility | ${finalSummary.accessibility} |`,
                  `| ${score(finalSummary['best-practices'])} Best practices | ${finalSummary['best-practices']} |`,
                  `| ${score(finalSummary.seo)} SEO | ${summary.seo} |`,
                  `\n`,
                ].join("\n");
  
                comments += comment + "\n";
            });
            
            const lighthouseComment = `## Lighthouse 성능 측정 결과 \n ${comments}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: lighthouseComment
            });


  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: assign random reviewer
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const teams = ["bbbjihan", "soojjung"];
            const randomReviewer = teams[Math.floor(Math.random() * teams.length)];

            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [randomReviewer]
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 🎉랜덤 리뷰 \n 랜덤 리뷰로 선정되신 @${randomReviewer}님!🎉 리뷰를 부탁드립니다.`
            });