name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: pnpm -F assignment-6 install
      - name: Run tsc and build
        run: |
          pnpm -F assignment-6 run tsc
          pnpm -F assignment-6 run build
      - name: Comment on PR if build fails
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '빌드 과정에서 오류가 발생했습니다. 로그를 확인해주세요.'
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: job2 구현
        run: echo "job2의 내용을 구현해주세요"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: job3 구현
        run: echo "job3의 내용을 구현해주세요"

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install dependencies
        run: |
          pnpm -F assignment-6 install
          pnpm install -g @lhci/cli@0.11.x
      - name: Build project
        run: pnpm -F assignment-6 run build
      - name: Create lighthouse-results directory
        run: |
          mkdir -p packages/assignment-6/lighthouse-results
          echo "Created directory structure:"
          ls -R packages
      - name: Run Lighthouse CI
        run: pnpm -F assignment-6 run lighthouse
      # - name: Debug - List lighthouse results
      #   run: |
      #     ls -R packages/assignment-6
      - name: Comment Lighthouse results on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const path = require('path');

            console.log('Current working directory:', process.cwd());
            console.log('Contents of current directory:', fs.readdirSync('.'));

            const lighthouseDir = path.join('packages', 'assignment-6', 'lighthouse-results');
            console.log('Lighthouse directory path:', lighthouseDir);

            if (!fs.existsSync(lighthouseDir)) {
              console.log('Lighthouse results directory does not exist');
              return;
            }

            console.log('Contents of lighthouse-results directory:', fs.readdirSync(lighthouseDir));

            const jsonFiles = fs.readdirSync(lighthouseDir).filter(file => file.endsWith('.json'));
            if (jsonFiles.length === 0) {
              console.log('No JSON files found in lighthouse-results directory');
              return;
            }

            const latestFile = jsonFiles.sort((a, b) => {
              return fs.statSync(path.join(lighthouseDir, b)).mtime.getTime() - 
                    fs.statSync(path.join(lighthouseDir, a)).mtime.getTime();
            })[0];

            const lighthouseReportPath = path.join(lighthouseDir, latestFile);
            console.log('Lighthouse report path:', lighthouseReportPath);

            if (!fs.existsSync(lighthouseReportPath)) {
              console.log('Lighthouse report file does not exist');
              return;
            }

            const lighthouseReport = fs.readFileSync(lighthouseReportPath, 'utf8');
            const report = JSON.parse(lighthouseReport);

            // 주요 메트릭을 추출합니다
            const metrics = [
              'first-contentful-paint',
              'largest-contentful-paint',
              'total-blocking-time',
              'cumulative-layout-shift',
            ];

            let comment = '## Lighthouse CI 결과\n\n';
            metrics.forEach(metric => {
              const score = report.audits[metric].score * 100;
              comment += `- ${report.audits[metric].title}: ${score.toFixed(0)}점\n`;
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })
      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report
          path: packages/assignment-6/lighthouse-results

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
