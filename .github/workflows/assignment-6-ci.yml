name: CI Assignment 6

on:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm -F assignment-6 tsc
      - run: pnpm -F assignment-6 build
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const pull_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;
            console.log(`Owner: ${owner}, Repo: ${repo}, PR number: ${pull_number}`);
            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: '## 빌드 오류 발생 ❌\nTypeScript 컴파일 또는 빌드 과정에서 오류가 발생했습니다. 로그를 확인해 주세요.',
              event: 'COMMENT'
            });

  lint:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm -F assignment-6 lint > lint_report.txt 2>&1
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const report = fs.readFileSync('lint_report.txt', 'utf8')
            const truncated_report = report.length > 65000 
              ? report.substr(0, 65000) + "\n\n... (report truncated due to length)"
              : report

            const pull_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: `## ESLint Results\n\`\`\`\n${truncated_report}\n\`\`\``,
              event: 'COMMENT'
            });

  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - run: |
          pnpm install
          pnpm --filter assignment-6 add -D @vitest/coverage-v8
      - run: pnpm -F assignment-6 coverage
      - id: format_coverage
        run: |
          COVERAGE_FILE="packages/assignment-6/coverage/coverage-summary.json"
          echo "Using coverage file: $COVERAGE_FILE"

          LINE_COVERAGE=$(jq '.total.lines.pct' $COVERAGE_FILE)
          echo "line_coverage: $LINE_COVERAGE"
          BRANCH_COVERAGE=$(jq '.total.branches.pct' $COVERAGE_FILE)
          echo "branch_coverage: $BRANCH_COVERAGE"
          FUNCTION_COVERAGE=$(jq '.total.functions.pct' $COVERAGE_FILE)
          echo "function_coverage: $FUNCTION_COVERAGE"
          STATEMENT_COVERAGE=$(jq '.total.statements.pct' $COVERAGE_FILE)
          echo "statement_coverage: $STATEMENT_COVERAGE"

          echo "line_coverage=${LINE_COVERAGE}" >> $GITHUB_OUTPUT
          echo "branch_coverage=${BRANCH_COVERAGE}" >> $GITHUB_OUTPUT
          echo "function_coverage=${FUNCTION_COVERAGE}" >> $GITHUB_OUTPUT
          echo "statement_coverage=${STATEMENT_COVERAGE}" >> $GITHUB_OUTPUT
      - if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const { owner, repo } = context.repo
            const pull_number = context.payload.pull_request.number;

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: '## 테스트 실패 ❌',
              event: 'COMMENT'
            });
      - if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const line_coverage = `${{ steps.format_coverage.outputs.line_coverage }}`
            const function_coverage = `${{ steps.format_coverage.outputs.function_coverage }}`
            const statement_coverage = `${{ steps.format_coverage.outputs.statement_coverage }}`
            const branch_coverage = `${{ steps.format_coverage.outputs.branch_coverage }}`

            const { owner, repo } = context.repo
            const pull_number = context.payload.pull_request.number;

            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              body: `## 테스트 성공 ✅\n ### 커버리지 결과\n 라인 커버리지: ${line_coverage}\n 함수 커버리지: ${function_coverage}\n 구문 커버리지: ${statement_coverage}\n 브랜치 커버리지: ${branch_coverage}`,
              event: 'COMMENT'
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: job4 구현
        run: echo "job4의 내용을 구현해주세요"

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
