name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job1: tsc, build 를 실행한다.'
        id: job1
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 build:tsc
      - name: 'job1-err: 오류가 발생하면 코멘트를 남긴다.'
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## tsc, build result
                
                빌드 과정에서 오류가 발생했습니다. 자세한 내용은 GitHub Actions 로그를 확인해주세요.`
            });

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job2: eslint를 실행'
        id: job2
        run:  |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 lint 2>&1 | tee lint_output.txt
          exit ${PIPESTATUS[0]}
      - name: 'job2-err: eslint에서 오류가 발생할 경우 report를 코멘트에 남긴다.'
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const lintOutput = fs.readFileSync('lint_output.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ESLint 실행 중 오류가 발생했습니다.
    
            ${lintOutput}`
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job3: 테스트를 실행'
        id: job3
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 test:coverage | tee test_output.txt
      - name: 'job3-res: 커버리지를 측정하여 코멘트에 남긴다.'
        if: success() && steps.job3.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const testOutput = fs.readFileSync('test_output.txt', 'utf8');
            
            // 'All files' 행을 찾아 커버리지 정보 추출
            const allFilesLine = testOutput.split('\n').find(line => line.startsWith('All files'));
            
            let coverageReport = '';
            
            if (allFilesLine) {
              const coverageValues = allFilesLine.split('|').map(item => item.trim());
              if (coverageValues.length >= 5) {
                coverageReport = `- 구문 커버리지: ${coverageValues[1]}%
            - 브랜치 커버리지: ${coverageValues[2]}%
            - 함수 커버리지: ${coverageValues[3]}%
            - 라인 커버리지: ${coverageValues[4]}%`;
              }
            }
              
            if (!coverageReport) {
              coverageReport = '커버리지 정보를 찾을 수 없습니다.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 테스트 성공 ✅
            ### 커버리지 결과:
    
            ${coverageReport.trim()}`
            });

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: 'job4: lighthouse ci 를 실행'
        id: job4
        run: |
          pnpm -F assignment-6 install
          pnpm -F assignment-6 lhci
      - name: 'job4-res: 실행 결과를 코멘트에 남긴다.'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const lighthouseReport = JSON.parse(fs.readFileSync('packages/assignment-6/lhci_reports/manifest.json', 'utf8'));
            const formatResult = (res) => Math.round(res * 100);
            
            // 첫 번째 결과만 사용
            const result = lighthouseReport[0];
            const { summary } = result;
            const finalSummary = Object.fromEntries(
            Object.entries(summary).map(([key, value]) => [key, formatResult(value)])
            );
            
            const comment = [
              "| 카테고리 | 점수 |",
              "| --- | --- |",
              `| Performance | ${finalSummary.performance}% |`,
              `| Accessibility | ${finalSummary.accessibility}% |`,
              `| Best practices | ${finalSummary['best-practices']}% |`,
              `| SEO | ${finalSummary.seo}% |`,
              "\n",
            ].join("\n");
            
            const lighthouseComment = `## Lighthouse 성능 측정 결과
            
            ${comment}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: lighthouseComment
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: 'job5: PR이 open될 때만 실행되고, 팀원 중 한 명을 랜덤으로 선정하여 리뷰어를 지정한 다음에 코멘트에 멘션하여 올린다. 실제로 PR에 리뷰어로 지정도 되어야한다.'
        id: job5
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const teamMembers = ["AnSuebin", "LucetTin5", "horang-e"]; // 팀 구성원 깃허브 사용자명 목록
            
            // 랜덤하게 리뷰어 선택
            const assignedReviewer = teamMembers[Math.floor(Math.random()*teamMembers.length)];
            
            // 리뷰어 지정
            github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [assignedReviewer]
            });
            
            // 코멘트 작성
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Reviewer ☺️ \n @${assignedReviewer}님, 리뷰 부탁드립니다.`,
            });
